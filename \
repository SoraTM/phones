-module(phone).
-export([enable/1, rpc/2, idle/1, call/1, stop/1]).

enable(DispatchPid) -> spawn(?MODULE, idle, [DispatchPid]).

rpc(Pid, Request) ->
    Pid ! {self(), Request},
    receive
        {Pid, Response} ->
            Response
    end.

call(Pid) ->
    rpc(Pid, connect_request).

stop(Pid) ->
    rpc(Pid, stop).

idle(DispatchPid) ->
    receive
        {From, connect_request} -> 
            From ! {self(), connect_allowed},
            connected(DispatchPid);
        {From, stop} ->
            disable(From);
        {From, _} ->
            From ! {self(), free_line},
            idle(DispatchPid)
   after 100 ->
        test_call(DispatchPid)
    end.

connecting(DispatchPid, Client) ->
    call(Client),
    receive
        {From, connect_allowed} ->
            From ! {message, "Hello"},
            io:format("Message sended"),
            connected(DispatchPid);
        {From, connect_request} -> 
            From ! {self(), line_is_busy},
            test_call(DispatchPid);
        {_From, line_is_busy} -> 
            test_call(DispatchPid); 
        {From, stop} ->
            disable(From)
    end.

connected(DispatchPid) ->
    receive
        {From, connect_request} ->
            From ! {self(), line_is_busy},
            connected(DispatchPid);
        {From, call_end} -> 
            From ! {self(), call_ended},
            idle(DispatchPid);
        {From, {message, Message}} ->
            io:format("Message recieved "),
            From ! {self(), {message, Message}},
            connected(DispatchPid);
        {From, stop} ->
            disable(From)
    end.

disable(From) -> From ! {self(), disabled}.

test_call(DispatchPid) ->
    io:format("TestCallStarted "),
    PhonesList = [
                  PhonePid || PhonePid <- phone_dispatcher:phone_list(DispatchPid), PhonePid =/= self()
                 ],
    io:format([PhonesList]);
    Client = lists:nth(rand:uniform(length(PhonesList)), PhonesList),
    io:format("Before timer"),
    timer:sleep(rand:uniform(1000)),
    io:format("Connecting "),
    connecting(DispatchPid, Client).
